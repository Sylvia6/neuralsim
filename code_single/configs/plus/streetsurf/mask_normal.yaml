#------------------------------------------------------------
#------------    Some shortcut configs
#------------------------------------------------------------

device_ids: -1

num_rays_pixel: 8192
# num_rays_lidar: 8192
# num_rays_image_patch: ${eval:"64*64"} # 4096 rays
hw_image_patch: [80,120] # 9600 rays

near: 0.1
far: 200.0
depth_max: 120.0 # To visualize / colorize depth when render/eval
extend_size: 250.0
num_coarse: 128 # Number of coarse samples on each ray
step_size: 0.2 # Ray-marching step size
upsample_inv_s: 64.0
upsample_inv_s_factors: [1., 4., 16.]
num_fine: [8,8,32] # [8,8,8] # Number of samples of 3 upsample stages
radius_scale_min: 1 # Nearest sampling shell of NeRF++ background (Distant-view model)
radius_scale_max: 1000 # Furthest sampling shell of NeRF++ background (Distant-view model)
distant_interval_type: inverse_proportional
distant_mode: fixed_cuboid_shells
distant_nsample: 64

sdf_scale: 25.0 # The real-world length represented by one unit of SDF

rgb_fn: l1
rgb_fn_param: {}

w_mask: 0.3

num_uniform: ${eval:"2**16"}

w_nor_l1: 0.02
w_nor_cos: 0.01

erode: 8
mono_fn: l2
mono_w: 1.0e-4
mono_w_reg: 1.0e-6
mono_after: 1000
mono_scales: 4
dep_thre: 0.5
nor_thre: 0.5
nor_mode: crdv

w_eikonal: 0.01
on_render_ratio: 0.5
on_occ_ratio: 1.0
on_render_type: both
safe_mse: true
errlim: 5

w_sparsity: 0.002
sparsity_anneal_for: 1000
sparsity_enable_after: 0

clbeta: 10.0
clw: 0.2
clearance_sdf: 0.02 # 0.02 * (sdf_scale=25) = 0.5m

num_iters: 12000
warmup_steps: 1500
min_factor: 0.06
fglr: 1.0e-2
bglr: 1.0e-2
skylr: 1.0e-3
emblr: 2.0e-2
image_embedding_dim: 4

start_it: 0
start_level: 2
stop_it: 3000
final_inv_s: 2400.0
ctrl_start: 2000
lnini: 0.1

use_estimate_alpha: false

geo_init_method: pretrain_after_zero_out # pretrain, pretrain_after_zero_out

camera_list: [front_left, front_right]
lidar_list: [lidar_TOP, lidar_FRONT, lidar_REAR, lidar_SIDE_LEFT, lidar_SIDE_RIGHT]
lidar_weight: [0.4,0.1,0.1,0.1,0.1] # Will be normalized when using
#------------------------------------------------------------
#------------    Full configs
#------------------------------------------------------------
# exp_dir: logs/streetsurf_refactor/dbgfix7_depth_seg938501_mono=${mono_fn}_${mono_w}_reg=${mono_w_reg}_aft=${mono_after}_erode=${erode}_wli=${w_nor_l1}_wcos=${w_nor_cos}_weik=${w_eikonal}_onocc=${on_occ_ratio}_a=${on_render_ratio}_wed=${on_render_type}_ctrlstart=${ctrl_start}_lnini=${lnini}_invs=${final_inv_s}_stop=${stop_it}_wsp=${w_sparsity}_for=${sparsity_anneal_for}_ini262144_depthre=${dep_thre}_nor${nor_mode}=${nor_thre}
# exp_parent_dir: logs/final_final_waymo_multiseq_exp9.9_withmask_nolidar_12k_cuboid_half_ext${extend_size}_${rgb_fn}_joint
exp_dir: logs/plus/20221228T111336_pdb-l4e-b0002_20_1to21.withmask_nolidar_with_normal_depth

dataset_cfg:
  target: dataio.autonomous_driving.CustomAutoDriveDataset
  param:
    root: /mnt/intel/jupyterhub/lilu/plus_data
    image_dirname: images
    # lidar_dirname: lidars
    mask_dirname: masks
    # rgb_mono_depth_dirname: depths
    rgb_mono_normals_dirname: normals

scenebank_cfg:
  # NOTE: scene_id[,start_frame[,n_frames]]
  scenarios:
    - 20221228T111336_pdb-l4e-b0002_20_1to21, 0, 200
    # - 20221228T111336_pdb-l4e-b0002_20_1to21, 0, 200
  observer_cfgs: 
    Camera:
      list: ${camera_list}
  on_load:
    no_objects: true # Set to true to skip loading foreground objects into scene graph
    # joint_camlidar: true # !!! Convinient for NVS
    align_orientation: true
    # consider_distortion: true
    # joint_camlidar_equivalent_extr: true

test_scenebank_cfg:
  # NOTE: scene_id[,start_frame[,n_frames]]
  scenarios: ${scenebank_cfg.scenarios}
  on_load: ${scenebank_cfg.on_load}
  observer_cfgs: 
    Camera:
      list: ${camera_list}
    RaysLidar:
      list: ${lidar_list}

assetbank_cfg:
  Street:
    model_class: app.models.single.LoTDNeuSStreet
    model_params:
      dtype: half
      var_ctrl_cfg:
        ln_inv_s_init: ${lnini}
        ln_inv_s_factor: 10.0
        ctrl_type: mix_linear
        start_it: ${ctrl_start}
        stop_it: ${training.num_iters}
        final_inv_s: ${final_inv_s}
      cos_anneal_cfg: null
      surface_cfg:
        sdf_scale: ${sdf_scale}
        encoding_cfg:
          lotd_use_cuboid: true
          lotd_auto_compute_cfg:
            type: ngp
            target_num_params: ${eval:"32*(2**20)"} # 64 MiB float16 params -> 32 Mi params
            min_res: 16
            n_feats: 2
            log2_hashmap_size: 20
            max_num_levels: null
          param_init_cfg:
            method: uniform_to_type
            bound: 1.0e-4
          anneal_cfg:
            type: hardmask
            start_it: ${start_it}
            start_level: ${start_level} # (need to be small: so the training is stable; not too small, so there's still valid initialize pretraining.)
            stop_it: ${stop_it} # Not for too much iters; should end very soon to not hinder quality
        decoder_cfg: 
          type: mlp
          D: 1
          W: 64
          # select_n_levels: 14
          activation:
            type: softplus
            beta: 100.0
        n_rgb_used_output: 0
        geo_init_method: ${geo_init_method}
      radiance_cfg:
        use_pos: true
        use_view_dirs: true
        dir_embed_cfg: 
          type: spherical
          degree: 4
        D: 2
        W: 64
        n_appear_embedding: ${image_embedding_dim}
      use_tcnn_backend: false
      accel_cfg:
        type: occ_grid
        vox_size: 1.0
        # resolution: [64,64,64]
        occ_val_fn_cfg:
          type: sdf
          inv_s: 256.0 # => +- 0.01 sdf @ 0.3 thre
        occ_thre: 0.3
        ema_decay: 0.95
        init_cfg:
          mode: from_net
          num_steps: 4
          num_pts: ${eval:"2**20"}
        acquire_from_net_cfg:
          num_steps: 4
          num_pts: ${eval:"2**20"}
        acquire_from_samples_cfg: {}
        n_steps_between_update: 16
        n_steps_warmup: 256
      ray_query_cfg:
        query_mode: march_occ_multi_upsample_compressed
        # query_mode: march_occ_multi_upsample
        query_param:
          nablas_has_grad: true
          num_coarse: ${num_coarse}
          num_fine: ${num_fine}
          coarse_step_cfg:
            step_mode: linear
          march_cfg:
            step_size: ${step_size} # Typical value: (far-near) / 4000
            max_steps: 4096
          upsample_inv_s: ${upsample_inv_s}
          upsample_inv_s_factors: ${upsample_inv_s_factors}
          upsample_use_estimate_alpha: ${use_estimate_alpha}
    asset_params:
      initialize_cfg: 
        target_shape: road_surface
        obs_ref: front_left # Reference observer. Its trajectory will be used for initialization.
        lr: 1.0e-3
        num_iters: 1000
        num_points: 262144
        w_eikonal: 3.0e-3
        floor_dim: z
        floor_up_sign: 1
        ego_height: 2.0
      preload_cfg: {}
      populate_cfg:
        extend_size: ${extend_size}
  Distant:
    model_class: app.models.single.LoTDNeRFDistant
    model_params:
      dtype: half
      encoding_cfg:
        input_ch: 4
        lotd_use_cuboid: true
        lotd_auto_compute_cfg:
          type: ngp4d
          target_num_params: ${eval:"16*(2**20)"} # 16 Mi params
          min_res_xyz: 16
          min_res_w: 4
          n_feats: 2
          log2_hashmap_size: 19
          per_level_scale: 1.382
        param_init_cfg:
          method: uniform_to_type
          bound: 1.0e-4
        # anneal_cfg:
        #   type: hardmask
        #   start_it: ${start_it}
        #   start_level: ${bg_start_level} # (need to be small: so the training is stable; not too small, so there's still valid initialize pretraining.)
        #   stop_it: ${stop_it} # Not for too much iters; should end very soon to not hinder quality
      extra_pos_embed_cfg:
        type: identity
      sigma_decoder_cfg: 
        type: mlp
        D: 1
        W: 64
        output_activation: softplus
      radiance_decoder_cfg:
        use_pos: false
        # pos_embed_cfg:
        #   type: identity
        use_view_dirs: false
        # dir_embed_cfg:
        #   type: spherical
        #   degree: 4
        use_nablas: false
        D: 2
        W: 64
        n_appear_embedding: ${image_embedding_dim}
      n_rgb_used_output: 0
      use_tcnn_backend: false
      include_inf_distance: false # !!! has sky
      radius_scale_min: ${radius_scale_min}
      radius_scale_max: ${radius_scale_max}
      ray_query_cfg:
        query_mode: march_occ
        query_param:
          march_cfg:
            interval_type: ${distant_interval_type}
            sample_mode: ${distant_mode}
            max_steps: ${distant_nsample}
    asset_params:
      populate_cfg:
        cr_obj_classname: Street
  Sky:
    model_class: app.models.env.SimpleSky
    model_params: 
      dir_embed_cfg:
        type: sinusoidal
        n_frequencies: 10
        use_tcnn_backend: false
      D: 2
      W: 256
      use_tcnn_backend: false
      n_appear_embedding: ${image_embedding_dim}
  ImageEmbeddings:
    model_class: app.models.scene.ImageEmbeddings
    model_params:
      dims: ${image_embedding_dim}
      weight_init: uniform
      weight_init_std: 1.0e-4
  #--- Pose refine related
  LearnableParams:
    model_class: app.models.scene.LearnableParams
    model_params:
      refine_ego_motion: true
      # ego_node_id: ego_car
      ego_class_name: Camera
      refine_camera_intr: false
      refine_camera_extr: false
      enable_after: 500

renderer:
  common:
    with_env: true # !!! has sky
    with_rgb: true
    with_normal: true
    near: ${near} # NOTE: Critical to scene scale!
    far: ${far}
  train:
    depth_use_normalized_vw: false # For meaningful depth supervision (if any)
    perturb: true
  val:
    depth_use_normalized_vw: true # For correct depth rendering
    perturb: false
    rayschunk: 4096

training:
  #---------- Dataset and sampling
  dataloader:
    preload: true
    preload_on_gpu: false
    tags:
      camera:
        downscale: 1
        list: ${camera_list}
      rgb_mask: {}
      # rgb_human_mask: {}
      rgb_dynamic_mask: {}
      rgb_ignore_mask:
        ignore_not_occupied: false
        # ignore_human: false
        ignore_dynamic: true
      # rgb_mono_depth: {}
      rgb_mono_normals: {}
    pixel_dataset:
      #---------- Frame and pixel dataloader
      joint: false
      equal_mode: ray_batch
      num_rays: ${num_rays_pixel}
      frame_sample_mode: uniform
      pixel_sample_mode: error_map
      error_map_res: [32,32]
      uniform_sampling_fraction: 0.5
      #---------- Joint frame-pixel dataloader
      # joint: true
      # equal_mode: ray_batch
      # num_rays: ${num_rays_pixel}
      # error_map_res: [32,32]
      # uniform_sampling_fraction: 0.5
    image_patch_dataset:
      # num_rays: ${num_rays_image_patch}
      HW: ${hw_image_patch}
      random_shift: true
      random_scale: false
      scale: 1.0
      camera_sample_mode: uniform
      frame_sample_mode: uniform
    # lidar_dataset:
    #   equal_mode: ray_batch
    #   num_rays: ${num_rays_lidar}
    #   frame_sample_mode: uniform
    #   lidar_sample_mode: merged_weighted
    #   multi_lidar_weight: ${lidar_weight} # Will be normalized when used
  val_dataloader:
    preload: false
    tags:
      camera:
        downscale: 1 
        list: ${camera_list}
      rgb_mask: {}
      # rgb_human_mask: {}
      rgb_dynamic_mask: {}
      rgb_ignore_mask:
        ignore_not_occupied: false
        # ignore_human: false
        ignore_dynamic: true
      # rgb_mono_depth: {}
      rgb_mono_normals: {}
    image_dataset:
      camera_sample_mode: all_list # !!!
      frame_sample_mode: uniform

  #---------- Training losses
  uniform_sample: ${num_uniform} # 64 Ki
  losses:
    rgb: 
      fn_type: ${rgb_fn}
      fn_param: ${rgb_fn_param}
      respect_ignore_mask: true
      # todo, filter mask pixels
    mono_normals:
      # distant_mode: cr_only
      distant_mode: ${nor_mode}
      w_l1: ${w_nor_l1}
      w_cos: ${w_nor_cos}
      ignore_mask_list: [pred_not_occupied, dynamic]
      #human, not_occupied,
      # mask_pred_thresh: ${nor_thre}
      apply_in_pixel_train_step: false
    # mono_depth:
    #   w: ${mono_w}
    #   fn_type: ${mono_fn}
    #   w_grad_reg: ${mono_w_reg}
    #   distant_mode: cr_only
    #   gt_pre_scale: 80.0
    #   gt_pre_shift: 1.0
    #   ignore_mask_list: [pred_not_occupied, dynamic]
    #   # human, not_occupied,
    #   # mask_pred_thresh: ${dep_thre}
    #   # mask_erode: ${erode}
    #   grad_reg_scales: ${mono_scales}
    #   enable_after: ${mono_after}
    #   detach_scale_shift: false
    #   scale_gt_to_pred: false
    occupancy_mask:
      w: ${w_mask}
      w_on_errmap: 0
      safe_bce: true
      pred_clip: 0
    mask_entropy:
      w: 0.005
      mode: crisp_cr
      enable_after: 1500
      anneal:
        type: linear
        start_it: 1500
        stop_it: 4500
        start_val: 0
        stop_val: 0.005
        update_every: 100
    # lidar:
    #   discard_outliers: 0
    #   discard_outliers_median: ${discard_median}
    #   discard_toofar: 80.0
    #   depth: 
    #     w: ${w_lidar}
    #     fn_type: ${lidar_fn}
    eikonal:
      safe_mse: ${safe_mse}
      safe_mse_err_limit: ${errlim}
      alpha_reg_zero: 0
      on_occ_ratio: ${on_occ_ratio}
      on_render_type: ${on_render_type}
      on_render_ratio: ${on_render_ratio}
      class_name_cfgs:
        Street:
          w: ${w_eikonal}
    sparsity:
      enable_after: ${sparsity_enable_after}
      class_name_cfgs:
        Street:
          key: sdf
          type: normalized_logistic_density
          inv_scale: 16.0
          w: ${w_sparsity}
          anneal:
            type: linear
            start_it: ${sparsity_enable_after}
            start_val: 0
            stop_it: ${eval:"${sparsity_anneal_for}+${sparsity_enable_after}"}
            stop_val: ${w_sparsity}
            update_every: 100
    clearance:
      class_name_cfgs:
        Street:
          w: ${clw}
          beta: ${clbeta}
          thresh: ${clearance_sdf}
    weight_reg:
      class_name_cfgs:
        Street:
          norm_type: 2.0
          w: 1.0e-6
        Distant:
          norm_type: 2.0
          w: 1.0e-6

  optim:
    default: 1.0e-3
    Sky: ${skylr}
    Distant:
      lr: ${bglr}
      eps: 1.0e-15
      betas: [0.9, 0.99]
    Street: 
      lr: ${fglr}
      eps: 1.0e-15
      betas: [0.9, 0.991]
      invs_betas: [0.9, 0.999]
    ImageEmbeddings: ${emblr}
    #--- Pose refine related
    LearnableParams: 
      ego_motion:
        lr: 0.001
        alpha_lr_rotation: 0.05

  num_iters: ${num_iters}
  scheduler:
    #---------- exponential
    type: exponential_step
    num_iters: ${training.num_iters}
    min_factor: ${min_factor}
    warmup_steps: ${warmup_steps}
    #---------- cosine
    # type: warmupcosine
    # num_iters: ${training.num_iters}
    # min_factor: ${min_factor}
    # warmup_steps: ${warmup_steps}
    #---------- milestone
    # type: multistep
    # milestones: [20000, 30000]
    # gamma: 0.33
  
  #---------- Logging and validation
  i_val: 1500      # unit: iters
  i_backup: -1 # unit: iters
  i_save: 900     # unit: seconds
  i_log: 20
  log_grad: false
  log_param: false

  ckpt_file: null
  ckpt_ignore_keys: []
  ckpt_only_use_keys: null